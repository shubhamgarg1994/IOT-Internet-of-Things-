
LCD_TEST5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000342  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800104  00800104  000003da  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016e  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000083  00000000  00000000  00000ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000041a  00000000  00000000  00000f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001cf  00000000  00000000  0000135b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003e0  00000000  00000000  0000152a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  0000190c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001fd  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000022e  00000000  00000000  00001b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00001dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000038  00000000  00000000  00001dff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 34       	cpi	r26, 0x49	; 73
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 19 01 	call	0x232	; 0x232 <main>
  9e:	0c 94 9f 01 	jmp	0x33e	; 0x33e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  bc:	30 91 c0 00 	lds	r19, 0x00C0
    data = UART0_DATA;
  c0:	20 91 c6 00 	lds	r18, 0x00C6
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  c4:	80 91 26 01 	lds	r24, 0x0126
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
  cc:	90 91 27 01 	lds	r25, 0x0127
  d0:	89 17       	cp	r24, r25
  d2:	51 f0       	breq	.+20     	; 0xe8 <__vector_18+0x42>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
  d4:	93 2f       	mov	r25, r19
  d6:	98 71       	andi	r25, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  d8:	80 93 26 01 	sts	0x0126, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  dc:	e8 e2       	ldi	r30, 0x28	; 40
  de:	f1 e0       	ldi	r31, 0x01	; 1
  e0:	e8 0f       	add	r30, r24
  e2:	f1 1d       	adc	r31, r1
  e4:	20 83       	st	Z, r18
  e6:	01 c0       	rjmp	.+2      	; 0xea <__vector_18+0x44>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
  e8:	92 e0       	ldi	r25, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
  ea:	90 93 48 01 	sts	0x0148, r25
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	3f 91       	pop	r19
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_19>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 116:	90 91 04 01 	lds	r25, 0x0104
 11a:	80 91 05 01 	lds	r24, 0x0105
 11e:	98 17       	cp	r25, r24
 120:	71 f0       	breq	.+28     	; 0x13e <__vector_19+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 122:	80 91 05 01 	lds	r24, 0x0105
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	8f 71       	andi	r24, 0x1F	; 31
        UART_TxTail = tmptail;
 12a:	80 93 05 01 	sts	0x0105, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 12e:	e6 e0       	ldi	r30, 0x06	; 6
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	e8 0f       	add	r30, r24
 134:	f1 1d       	adc	r31, r1
 136:	80 81       	ld	r24, Z
 138:	80 93 c6 00 	sts	0x00C6, r24
 13c:	05 c0       	rjmp	.+10     	; 0x148 <__vector_19+0x44>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 13e:	e1 ec       	ldi	r30, 0xC1	; 193
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8f 7d       	andi	r24, 0xDF	; 223
 146:	80 83       	st	Z, r24
    }
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 15a:	10 92 04 01 	sts	0x0104, r1
    UART_TxTail = 0;
 15e:	10 92 05 01 	sts	0x0105, r1
    UART_RxHead = 0;
 162:	10 92 26 01 	sts	0x0126, r1
    UART_RxTail = 0;
 166:	10 92 27 01 	sts	0x0127, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 16a:	99 23       	and	r25, r25
 16c:	24 f4       	brge	.+8      	; 0x176 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 16e:	22 e0       	ldi	r18, 0x02	; 2
 170:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
 174:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
 176:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
 17a:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 17e:	88 e9       	ldi	r24, 0x98	; 152
 180:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	80 93 c2 00 	sts	0x00C2, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 18a:	08 95       	ret

0000018c <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 18c:	90 91 26 01 	lds	r25, 0x0126
 190:	80 91 27 01 	lds	r24, 0x0127
 194:	98 17       	cp	r25, r24
 196:	91 f0       	breq	.+36     	; 0x1bc <uart_getc+0x30>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 198:	80 91 27 01 	lds	r24, 0x0127
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	8f 71       	andi	r24, 0x1F	; 31
    UART_RxTail = tmptail; 
 1a0:	80 93 27 01 	sts	0x0127, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 1a4:	e8 e2       	ldi	r30, 0x28	; 40
 1a6:	f1 e0       	ldi	r31, 0x01	; 1
 1a8:	e8 0f       	add	r30, r24
 1aa:	f1 1d       	adc	r31, r1
 1ac:	80 81       	ld	r24, Z
    
    return (UART_LastRxError << 8) + data;
 1ae:	90 91 48 01 	lds	r25, 0x0148
 1b2:	39 2f       	mov	r19, r25
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	28 0f       	add	r18, r24
 1b8:	31 1d       	adc	r19, r1
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <uart_getc+0x34>
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	31 e0       	ldi	r19, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
 1c0:	82 2f       	mov	r24, r18
 1c2:	93 2f       	mov	r25, r19
 1c4:	08 95       	ret

000001c6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1c6:	20 91 04 01 	lds	r18, 0x0104
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 1ce:	90 91 05 01 	lds	r25, 0x0105
 1d2:	29 17       	cp	r18, r25
 1d4:	e1 f3       	breq	.-8      	; 0x1ce <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 1d6:	e6 e0       	ldi	r30, 0x06	; 6
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
 1da:	e2 0f       	add	r30, r18
 1dc:	f1 1d       	adc	r31, r1
 1de:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 1e0:	20 93 04 01 	sts	0x0104, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 1e4:	e1 ec       	ldi	r30, 0xC1	; 193
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	80 62       	ori	r24, 0x20	; 32
 1ec:	80 83       	st	Z, r24

}/* uart_putc */
 1ee:	08 95       	ret

000001f0 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
    while (*s) 
 1f6:	88 81       	ld	r24, Y
 1f8:	88 23       	and	r24, r24
 1fa:	31 f0       	breq	.+12     	; 0x208 <uart_puts+0x18>
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
 1fc:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart_putc(*s++);
 1fe:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 202:	89 91       	ld	r24, Y+
 204:	88 23       	and	r24, r24
 206:	d9 f7       	brne	.-10     	; 0x1fe <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 214:	fc 01       	movw	r30, r24
 216:	84 91       	lpm	r24, Z+
 218:	88 23       	and	r24, r24
 21a:	41 f0       	breq	.+16     	; 0x22c <uart_puts_p+0x1e>
 21c:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(c);
 21e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uart_putc>
 222:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 224:	21 96       	adiw	r28, 0x01	; 1
 226:	84 91       	lpm	r24, Z+
 228:	88 23       	and	r24, r24
 22a:	c9 f7       	brne	.-14     	; 0x21e <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <main>:
#include "uart.h"

#define F_CPU 8000000

int main(void)
{
 232:	af 92       	push	r10
 234:	bf 92       	push	r11
 236:	cf 92       	push	r12
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	2a 97       	sbiw	r28, 0x0a	; 10
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
	//init uart
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
 256:	8b e2       	ldi	r24, 0x2B	; 43
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 ad 00 	call	0x15a	; 0x15a <uart_init>
    sei();
 25e:	78 94       	sei
    uint8_t led = 0;

    while(1) {
    	int i = 0;
    	int line = 0;
    	for(i=0; i<10; i++) {
 260:	00 e0       	ldi	r16, 0x00	; 0
 262:	10 e0       	ldi	r17, 0x00	; 0
    		char buf[10];
    		itoa(i, buf, 10);
 264:	7e 01       	movw	r14, r28
 266:	08 94       	sec
 268:	e1 1c       	adc	r14, r1
 26a:	f1 1c       	adc	r15, r1
        	uart_puts(buf);
        	uart_puts("\r\n");
 26c:	0f 2e       	mov	r0, r31
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	cf 2e       	mov	r12, r31
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	df 2e       	mov	r13, r31
 276:	f0 2d       	mov	r31, r0
    uint8_t led = 0;

    while(1) {
    	int i = 0;
    	int line = 0;
    	for(i=0; i<10; i++) {
 278:	aa 24       	eor	r10, r10
 27a:	bb 24       	eor	r11, r11
    		char buf[10];
    		itoa(i, buf, 10);
 27c:	c8 01       	movw	r24, r16
 27e:	b7 01       	movw	r22, r14
 280:	4a e0       	ldi	r20, 0x0A	; 10
 282:	50 e0       	ldi	r21, 0x00	; 0
 284:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <itoa>
        	uart_puts(buf);
 288:	c7 01       	movw	r24, r14
 28a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <uart_puts>
        	uart_puts("\r\n");
 28e:	c6 01       	movw	r24, r12
 290:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	8f e9       	ldi	r24, 0x9F	; 159
 296:	96 e8       	ldi	r25, 0x86	; 134
 298:	a1 e0       	ldi	r26, 0x01	; 1
 29a:	81 50       	subi	r24, 0x01	; 1
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	a0 40       	sbci	r26, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x68>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x72>
 2a4:	00 00       	nop
    uint8_t led = 0;

    while(1) {
    	int i = 0;
    	int line = 0;
    	for(i=0; i<10; i++) {
 2a6:	0f 5f       	subi	r16, 0xFF	; 255
 2a8:	1f 4f       	sbci	r17, 0xFF	; 255
 2aa:	0a 30       	cpi	r16, 0x0A	; 10
 2ac:	11 05       	cpc	r17, r1
 2ae:	34 f3       	brlt	.-52     	; 0x27c <main+0x4a>
 2b0:	85 01       	movw	r16, r10
 2b2:	e4 cf       	rjmp	.-56     	; 0x27c <main+0x4a>

000002b4 <itoa>:
 2b4:	fb 01       	movw	r30, r22
 2b6:	9f 01       	movw	r18, r30
 2b8:	e8 94       	clt
 2ba:	42 30       	cpi	r20, 0x02	; 2
 2bc:	c4 f0       	brlt	.+48     	; 0x2ee <itoa+0x3a>
 2be:	45 32       	cpi	r20, 0x25	; 37
 2c0:	b4 f4       	brge	.+44     	; 0x2ee <itoa+0x3a>
 2c2:	4a 30       	cpi	r20, 0x0A	; 10
 2c4:	29 f4       	brne	.+10     	; 0x2d0 <itoa+0x1c>
 2c6:	97 fb       	bst	r25, 7
 2c8:	1e f4       	brtc	.+6      	; 0x2d0 <itoa+0x1c>
 2ca:	90 95       	com	r25
 2cc:	81 95       	neg	r24
 2ce:	9f 4f       	sbci	r25, 0xFF	; 255
 2d0:	64 2f       	mov	r22, r20
 2d2:	77 27       	eor	r23, r23
 2d4:	0e 94 8b 01 	call	0x316	; 0x316 <__udivmodhi4>
 2d8:	80 5d       	subi	r24, 0xD0	; 208
 2da:	8a 33       	cpi	r24, 0x3A	; 58
 2dc:	0c f0       	brlt	.+2      	; 0x2e0 <itoa+0x2c>
 2de:	89 5d       	subi	r24, 0xD9	; 217
 2e0:	81 93       	st	Z+, r24
 2e2:	cb 01       	movw	r24, r22
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	a1 f7       	brne	.-24     	; 0x2d0 <itoa+0x1c>
 2e8:	16 f4       	brtc	.+4      	; 0x2ee <itoa+0x3a>
 2ea:	5d e2       	ldi	r21, 0x2D	; 45
 2ec:	51 93       	st	Z+, r21
 2ee:	10 82       	st	Z, r1
 2f0:	c9 01       	movw	r24, r18
 2f2:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <strrev>

000002f6 <strrev>:
 2f6:	dc 01       	movw	r26, r24
 2f8:	fc 01       	movw	r30, r24
 2fa:	67 2f       	mov	r22, r23
 2fc:	71 91       	ld	r23, Z+
 2fe:	77 23       	and	r23, r23
 300:	e1 f7       	brne	.-8      	; 0x2fa <strrev+0x4>
 302:	32 97       	sbiw	r30, 0x02	; 2
 304:	04 c0       	rjmp	.+8      	; 0x30e <strrev+0x18>
 306:	7c 91       	ld	r23, X
 308:	6d 93       	st	X+, r22
 30a:	70 83       	st	Z, r23
 30c:	62 91       	ld	r22, -Z
 30e:	ae 17       	cp	r26, r30
 310:	bf 07       	cpc	r27, r31
 312:	c8 f3       	brcs	.-14     	; 0x306 <strrev+0x10>
 314:	08 95       	ret

00000316 <__udivmodhi4>:
 316:	aa 1b       	sub	r26, r26
 318:	bb 1b       	sub	r27, r27
 31a:	51 e1       	ldi	r21, 0x11	; 17
 31c:	07 c0       	rjmp	.+14     	; 0x32c <__udivmodhi4_ep>

0000031e <__udivmodhi4_loop>:
 31e:	aa 1f       	adc	r26, r26
 320:	bb 1f       	adc	r27, r27
 322:	a6 17       	cp	r26, r22
 324:	b7 07       	cpc	r27, r23
 326:	10 f0       	brcs	.+4      	; 0x32c <__udivmodhi4_ep>
 328:	a6 1b       	sub	r26, r22
 32a:	b7 0b       	sbc	r27, r23

0000032c <__udivmodhi4_ep>:
 32c:	88 1f       	adc	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	5a 95       	dec	r21
 332:	a9 f7       	brne	.-22     	; 0x31e <__udivmodhi4_loop>
 334:	80 95       	com	r24
 336:	90 95       	com	r25
 338:	bc 01       	movw	r22, r24
 33a:	cd 01       	movw	r24, r26
 33c:	08 95       	ret

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
