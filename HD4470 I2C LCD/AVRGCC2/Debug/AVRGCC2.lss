
AVRGCC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000004a6  0000053a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010c  0080010c  00000546  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000015b  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000708  00000000  00000000  00000e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002c3  00000000  00000000  00001527  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006d9  00000000  00000000  000017ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00001ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000241  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000418  00000000  00000000  00002265  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  0000267d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000038  00000000  00000000  000026b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__c.1636>:
  68:	48 65 6c 6c 6f 20 57 6f 72 6c 64 00                 Hello World.

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	e6 ea       	ldi	r30, 0xA6	; 166
  88:	f4 e0       	ldi	r31, 0x04	; 4
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	ac 30       	cpi	r26, 0x0C	; 12
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	11 e0       	ldi	r17, 0x01	; 1
  98:	ac e0       	ldi	r26, 0x0C	; 12
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	af 30       	cpi	r26, 0x0F	; 15
  a2:	b1 07       	cpc	r27, r17
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 29 02 	call	0x452	; 0x452 <main>
  aa:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
  b2:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
  b6:	8d ef       	ldi	r24, 0xFD	; 253
  b8:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
  bc:	08 95       	ret

000000be <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  be:	94 ea       	ldi	r25, 0xA4	; 164
  c0:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
  c4:	ec eb       	ldi	r30, 0xBC	; 188
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	90 81       	ld	r25, Z
  ca:	99 23       	and	r25, r25
  cc:	ec f7       	brge	.-6      	; 0xc8 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
  ce:	90 91 b9 00 	lds	r25, 0x00B9
  d2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	11 f0       	breq	.+4      	; 0xdc <i2c_start+0x1e>
  d8:	90 31       	cpi	r25, 0x10	; 16
  da:	a1 f4       	brne	.+40     	; 0x104 <i2c_start+0x46>

	// send device address
	TWDR = address;
  dc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
  e0:	84 e8       	ldi	r24, 0x84	; 132
  e2:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
  e6:	ec eb       	ldi	r30, 0xBC	; 188
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 23       	and	r24, r24
  ee:	ec f7       	brge	.-6      	; 0xea <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
  f0:	90 91 b9 00 	lds	r25, 0x00B9
  f4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
  f6:	98 31       	cpi	r25, 0x18	; 24
  f8:	39 f0       	breq	.+14     	; 0x108 <i2c_start+0x4a>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 34       	cpi	r25, 0x40	; 64
  fe:	29 f4       	brne	.+10     	; 0x10a <i2c_start+0x4c>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 108:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 10a:	08 95       	ret

0000010c <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 110:	ec eb       	ldi	r30, 0xBC	; 188
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 116:	a9 eb       	ldi	r26, 0xB9	; 185
 118:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
 11a:	cb eb       	ldi	r28, 0xBB	; 187
 11c:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
 11e:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 120:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 122:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 124:	90 81       	ld	r25, Z
 126:	99 23       	and	r25, r25
 128:	ec f7       	brge	.-6      	; 0x124 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 12a:	9c 91       	ld	r25, X
 12c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 12e:	98 30       	cpi	r25, 0x08	; 8
 130:	11 f0       	breq	.+4      	; 0x136 <i2c_start_wait+0x2a>
 132:	90 31       	cpi	r25, 0x10	; 16
 134:	b1 f7       	brne	.-20     	; 0x122 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
 136:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 138:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 13a:	90 81       	ld	r25, Z
 13c:	99 23       	and	r25, r25
 13e:	ec f7       	brge	.-6      	; 0x13a <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 140:	9c 91       	ld	r25, X
 142:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 144:	90 32       	cpi	r25, 0x20	; 32
 146:	11 f0       	breq	.+4      	; 0x14c <i2c_start_wait+0x40>
 148:	98 35       	cpi	r25, 0x58	; 88
 14a:	29 f4       	brne	.+10     	; 0x156 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 14c:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 14e:	90 81       	ld	r25, Z
 150:	94 fd       	sbrc	r25, 4
 152:	fd cf       	rjmp	.-6      	; 0x14e <i2c_start_wait+0x42>
 154:	e6 cf       	rjmp	.-52     	; 0x122 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 15c:	0e 94 5f 00 	call	0xbe	; 0xbe <i2c_start>

}/* i2c_rep_start */
 160:	08 95       	ret

00000162 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 162:	84 e9       	ldi	r24, 0x94	; 148
 164:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 168:	ec eb       	ldi	r30, 0xBC	; 188
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	84 fd       	sbrc	r24, 4
 170:	fd cf       	rjmp	.-6      	; 0x16c <i2c_stop+0xa>

}/* i2c_stop */
 172:	08 95       	ret

00000174 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 174:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 178:	84 e8       	ldi	r24, 0x84	; 132
 17a:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 17e:	ec eb       	ldi	r30, 0xBC	; 188
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	88 23       	and	r24, r24
 186:	ec f7       	brge	.-6      	; 0x182 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 188:	90 91 b9 00 	lds	r25, 0x00B9
 18c:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	98 32       	cpi	r25, 0x28	; 40
 192:	09 f4       	brne	.+2      	; 0x196 <i2c_write+0x22>
 194:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
 196:	08 95       	ret

00000198 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 198:	84 ec       	ldi	r24, 0xC4	; 196
 19a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
 19e:	ec eb       	ldi	r30, 0xBC	; 188
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	88 23       	and	r24, r24
 1a6:	ec f7       	brge	.-6      	; 0x1a2 <i2c_readAck+0xa>

    return TWDR;
 1a8:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
 1ac:	08 95       	ret

000001ae <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 1ae:	84 e8       	ldi	r24, 0x84	; 132
 1b0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
 1b4:	ec eb       	ldi	r30, 0xBC	; 188
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	88 23       	and	r24, r24
 1bc:	ec f7       	brge	.-6      	; 0x1b8 <i2c_readNak+0xa>
	
    return TWDR;
 1be:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
 1c2:	08 95       	ret

000001c4 <I2C_WRITESEQ>:
#define lcd_puts_P(__s)         lcd_puts_p(PSTR(__s))

 

uint8_t I2C_WRITESEQ(uint8_t slave, uint8_t *seq, uint8_t n)
{
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	f6 2e       	mov	r15, r22
 1d2:	e7 2e       	mov	r14, r23
 1d4:	14 2f       	mov	r17, r20
    uint8_t ret = 1;
    if (i2c_start(slave << 1) == 0) {
 1d6:	88 0f       	add	r24, r24
 1d8:	0e 94 5f 00 	call	0xbe	; 0xbe <i2c_start>
 1dc:	88 23       	and	r24, r24
 1de:	91 f4       	brne	.+36     	; 0x204 <I2C_WRITESEQ+0x40>
        uint8_t i;
        for (i = 0; i < n; i++)
 1e0:	11 23       	and	r17, r17
 1e2:	91 f0       	breq	.+36     	; 0x208 <I2C_WRITESEQ+0x44>
 1e4:	0f 2d       	mov	r16, r15
 1e6:	8e 2d       	mov	r24, r14
 1e8:	ef 2c       	mov	r14, r15
 1ea:	e7 01       	movw	r28, r14
 1ec:	7e 01       	movw	r14, r28
 1ee:	f8 2e       	mov	r15, r24
 1f0:	e7 01       	movw	r28, r14
            i2c_write(seq[i]);
 1f2:	89 91       	ld	r24, Y+
 1f4:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_write>
uint8_t I2C_WRITESEQ(uint8_t slave, uint8_t *seq, uint8_t n)
{
    uint8_t ret = 1;
    if (i2c_start(slave << 1) == 0) {
        uint8_t i;
        for (i = 0; i < n; i++)
 1f8:	7e 01       	movw	r14, r28
 1fa:	e0 1a       	sub	r14, r16
 1fc:	e1 16       	cp	r14, r17
 1fe:	c8 f3       	brcs	.-14     	; 0x1f2 <I2C_WRITESEQ+0x2e>
            i2c_write(seq[i]);
        ret = 0;
 200:	10 e0       	ldi	r17, 0x00	; 0
 202:	03 c0       	rjmp	.+6      	; 0x20a <I2C_WRITESEQ+0x46>

 

uint8_t I2C_WRITESEQ(uint8_t slave, uint8_t *seq, uint8_t n)
{
    uint8_t ret = 1;
 204:	11 e0       	ldi	r17, 0x01	; 1
 206:	01 c0       	rjmp	.+2      	; 0x20a <I2C_WRITESEQ+0x46>
    if (i2c_start(slave << 1) == 0) {
        uint8_t i;
        for (i = 0; i < n; i++)
            i2c_write(seq[i]);
        ret = 0;
 208:	10 e0       	ldi	r17, 0x00	; 0
    }
    i2c_stop();
 20a:	0e 94 b1 00 	call	0x162	; 0x162 <i2c_stop>
    return ret;

}
 20e:	81 2f       	mov	r24, r17
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	08 95       	ret

0000021e <wr_lcd_mode>:

static char wr_lcd_mode(unsigned char c, unsigned char mode)
{
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	df 93       	push	r29
 224:	cf 93       	push	r28
 226:	00 d0       	rcall	.+0      	; 0x228 <wr_lcd_mode+0xa>
 228:	00 d0       	rcall	.+0      	; 0x22a <wr_lcd_mode+0xc>
 22a:	0f 92       	push	r0
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	18 2f       	mov	r17, r24
    char ret = 1;
    unsigned char seq[5];
    static unsigned char backlight = 8;

    if (mode == 8) {
 232:	68 30       	cpi	r22, 0x08	; 8
 234:	71 f4       	brne	.+28     	; 0x252 <wr_lcd_mode+0x34>

        backlight = (c != 0) ? 8 : 0;
 236:	88 23       	and	r24, r24
 238:	11 f0       	breq	.+4      	; 0x23e <wr_lcd_mode+0x20>
 23a:	88 e0       	ldi	r24, 0x08	; 8
 23c:	01 c0       	rjmp	.+2      	; 0x240 <wr_lcd_mode+0x22>
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	80 93 00 01 	sts	0x0100, r24

        return I2C_WRITESEQ(PCF8574A, &backlight, 1);
 244:	87 e2       	ldi	r24, 0x27	; 39
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	71 e0       	ldi	r23, 0x01	; 1
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_WRITESEQ>
 250:	23 c0       	rjmp	.+70     	; 0x298 <wr_lcd_mode+0x7a>

    }
    mode |= backlight;
 252:	00 91 00 01 	lds	r16, 0x0100
 256:	06 2b       	or	r16, r22
    seq[0] = mode;                      // EN=0, RW=0, RS=mode
 258:	09 83       	std	Y+1, r16	; 0x01
    seq[1] = (c & 0xF0) | mode | 4;     // EN=1, RW=0, RS=mode
 25a:	80 7f       	andi	r24, 0xF0	; 240
 25c:	84 60       	ori	r24, 0x04	; 4
 25e:	80 2b       	or	r24, r16
 260:	8a 83       	std	Y+2, r24	; 0x02
    seq[2] = seq[1] & ~4;               // EN=0, RW=0, RS=mode
 262:	8b 7f       	andi	r24, 0xFB	; 251
 264:	8b 83       	std	Y+3, r24	; 0x03
    seq[3] = (c << 4) | mode | 4;       // EN=1, RW=0, RS=mode
 266:	81 2f       	mov	r24, r17
 268:	82 95       	swap	r24
 26a:	80 7f       	andi	r24, 0xF0	; 240
 26c:	80 2b       	or	r24, r16
 26e:	84 60       	ori	r24, 0x04	; 4
 270:	8c 83       	std	Y+4, r24	; 0x04
    seq[4] = seq[3] & ~4;               // EN=0, RW=0, RS=mode
 272:	8b 7f       	andi	r24, 0xFB	; 251
 274:	8d 83       	std	Y+5, r24	; 0x05
    ret = I2C_WRITESEQ(PCF8574A, seq, 5);
 276:	87 e2       	ldi	r24, 0x27	; 39
 278:	be 01       	movw	r22, r28
 27a:	6f 5f       	subi	r22, 0xFF	; 255
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	45 e0       	ldi	r20, 0x05	; 5
 280:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_WRITESEQ>
    if (!(mode & 1) && c <= 2)
 284:	00 fd       	sbrc	r16, 0
 286:	08 c0       	rjmp	.+16     	; 0x298 <wr_lcd_mode+0x7a>
 288:	13 30       	cpi	r17, 0x03	; 3
 28a:	30 f4       	brcc	.+12     	; 0x298 <wr_lcd_mode+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	e3 ef       	ldi	r30, 0xF3	; 243
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	31 97       	sbiw	r30, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <wr_lcd_mode+0x72>
 294:	00 c0       	rjmp	.+0      	; 0x296 <wr_lcd_mode+0x78>
 296:	00 00       	nop
        _delay_ms(2);                    // CLS and HOME
    return ret;
}
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	cf 91       	pop	r28
 2a4:	df 91       	pop	r29
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <lcd_gotoxy>:


// set the LCD display position  x=0..39 y=0..3

void lcd_gotoxy(unsigned char x, unsigned char y)
{
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	08 2f       	mov	r16, r24
 2b2:	16 2f       	mov	r17, r22
    wr_lcd_mode(0x80 | (_base_y[y] | x), 0);
 2b4:	98 2f       	mov	r25, r24
 2b6:	90 68       	ori	r25, 0x80	; 128
 2b8:	e6 2f       	mov	r30, r22
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	ef 5f       	subi	r30, 0xFF	; 255
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	80 81       	ld	r24, Z
 2c2:	89 2b       	or	r24, r25
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	0e 94 0f 01 	call	0x21e	; 0x21e <wr_lcd_mode>
    _lcd_x=x;
 2ca:	00 93 0d 01 	sts	0x010D, r16
    _lcd_y=y;
 2ce:	10 93 0e 01 	sts	0x010E, r17
}
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	08 95       	ret

000002d8 <lcd_clrscr>:

// clear the LCD

void lcd_clrscr(void)
{
    wr_lcd_mode(0x01, 0);
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	0e 94 0f 01 	call	0x21e	; 0x21e <wr_lcd_mode>
    _lcd_x = _lcd_y = 0;
 2e0:	10 92 0e 01 	sts	0x010E, r1
 2e4:	10 92 0d 01 	sts	0x010D, r1
}
 2e8:	08 95       	ret

000002ea <lcd_home>:

// home the LCD

void lcd_home(void)
{
    wr_lcd_mode(0x02, 0);
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	0e 94 0f 01 	call	0x21e	; 0x21e <wr_lcd_mode>
    _lcd_x = _lcd_y = 0;
 2f2:	10 92 0e 01 	sts	0x010E, r1
 2f6:	10 92 0d 01 	sts	0x010D, r1
}
 2fa:	08 95       	ret

000002fc <lcd_putc>:

void lcd_putc(char c)
{
 2fc:	1f 93       	push	r17
 2fe:	18 2f       	mov	r17, r24
    if (_lcd_x>=_lcd_maxx || c == '\n')
 300:	90 91 0d 01 	lds	r25, 0x010D
 304:	80 91 0c 01 	lds	r24, 0x010C
 308:	98 17       	cp	r25, r24
 30a:	18 f4       	brcc	.+6      	; 0x312 <lcd_putc+0x16>
 30c:	1a 30       	cpi	r17, 0x0A	; 10
 30e:	59 f4       	brne	.+22     	; 0x326 <lcd_putc+0x2a>
 310:	14 c0       	rjmp	.+40     	; 0x33a <lcd_putc+0x3e>
    {
        lcd_gotoxy(0,++_lcd_y);
 312:	60 91 0e 01 	lds	r22, 0x010E
 316:	6f 5f       	subi	r22, 0xFF	; 255
 318:	60 93 0e 01 	sts	0x010E, r22
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_gotoxy>
    }
    if (c != '\n') {
 322:	1a 30       	cpi	r17, 0x0A	; 10
 324:	91 f0       	breq	.+36     	; 0x34a <lcd_putc+0x4e>
        ++_lcd_x;
 326:	80 91 0d 01 	lds	r24, 0x010D
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	80 93 0d 01 	sts	0x010D, r24

        wr_lcd_mode(c, 1);
 330:	81 2f       	mov	r24, r17
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	0e 94 0f 01 	call	0x21e	; 0x21e <wr_lcd_mode>
 338:	08 c0       	rjmp	.+16     	; 0x34a <lcd_putc+0x4e>

void lcd_putc(char c)
{
    if (_lcd_x>=_lcd_maxx || c == '\n')
    {
        lcd_gotoxy(0,++_lcd_y);
 33a:	60 91 0e 01 	lds	r22, 0x010E
 33e:	6f 5f       	subi	r22, 0xFF	; 255
 340:	60 93 0e 01 	sts	0x010E, r22
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_gotoxy>
    if (c != '\n') {
        ++_lcd_x;

        wr_lcd_mode(c, 1);
    }
}
 34a:	1f 91       	pop	r17
 34c:	08 95       	ret

0000034e <lcd_puts>:

// write the string str located in SRAM to the LCD

void lcd_puts(const char *str)
{
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	ec 01       	movw	r28, r24
    while (*str) lcd_putc(*str++);
 354:	88 81       	ld	r24, Y
 356:	88 23       	and	r24, r24
 358:	31 f0       	breq	.+12     	; 0x366 <lcd_puts+0x18>
    }
}

// write the string str located in SRAM to the LCD

void lcd_puts(const char *str)
 35a:	21 96       	adiw	r28, 0x01	; 1
{
    while (*str) lcd_putc(*str++);
 35c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_putc>
 360:	89 91       	ld	r24, Y+
 362:	88 23       	and	r24, r24
 364:	d9 f7       	brne	.-10     	; 0x35c <lcd_puts+0xe>
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <lcd_puts_p>:

// write the string str located in FLASH to the LCD

void lcd_puts_p(const char *progmem_s)
{
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ec 01       	movw	r28, r24
    uint8_t c;
	while ((c = pgm_read_byte(progmem_s++)) != 0) lcd_putc(c);
 372:	fc 01       	movw	r30, r24
 374:	84 91       	lpm	r24, Z+
 376:	88 23       	and	r24, r24
 378:	41 f0       	breq	.+16     	; 0x38a <lcd_puts_p+0x1e>
 37a:	21 96       	adiw	r28, 0x01	; 1
 37c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_putc>
 380:	fe 01       	movw	r30, r28
 382:	21 96       	adiw	r28, 0x01	; 1
 384:	84 91       	lpm	r24, Z+
 386:	88 23       	and	r24, r24
 388:	c9 f7       	brne	.-14     	; 0x37c <lcd_puts_p+0x10>
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <lcd_command>:

void lcd_command(unsigned char cmd)
{
    wr_lcd_mode(cmd, 0);
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	0e 94 0f 01 	call	0x21e	; 0x21e <wr_lcd_mode>
}
 396:	08 95       	ret

00000398 <lcd_data>:

void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	0e 94 0f 01 	call	0x21e	; 0x21e <wr_lcd_mode>
}
 39e:	08 95       	ret

000003a0 <lcd_init>:

// initialize the LCD controller

void lcd_init(unsigned char command)
{
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <lcd_init+0x10>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <lcd_init+0x12>
 3b2:	00 d0       	rcall	.+0      	; 0x3b4 <lcd_init+0x14>
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	d8 2e       	mov	r13, r24
    unsigned char i;
    // High-Nibble von Byte 8 = Display Control:

    // 1DCB****  D: Disp on/off; C: Cursor on/off  B: blink on/off

    char init_sequenz[] = { 0x33, 0x32, 0x28, 0x0C, 0x06, 0x01 };
 3ba:	de 01       	movw	r26, r28
 3bc:	11 96       	adiw	r26, 0x01	; 1
 3be:	e5 e0       	ldi	r30, 0x05	; 5
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	01 90       	ld	r0, Z+
 3c6:	0d 92       	st	X+, r0
 3c8:	81 50       	subi	r24, 0x01	; 1
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <lcd_init+0x24>

    _lcd_maxx = LCD_DISP_LENGTH;
 3cc:	80 e1       	ldi	r24, 0x10	; 16
 3ce:	80 93 0c 01 	sts	0x010C, r24

    _base_y[2] = _base_y[0] + _lcd_maxx;
 3d2:	e1 e0       	ldi	r30, 0x01	; 1
 3d4:	f1 e0       	ldi	r31, 0x01	; 1
 3d6:	80 81       	ld	r24, Z
 3d8:	80 5f       	subi	r24, 0xF0	; 240
 3da:	80 93 03 01 	sts	0x0103, r24

    _base_y[3] = _base_y[1] + _lcd_maxx;
 3de:	81 81       	ldd	r24, Z+1	; 0x01
 3e0:	80 5f       	subi	r24, 0xF0	; 240
 3e2:	83 83       	std	Z+3, r24	; 0x03

    I2C_INIT();
 3e4:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_init>
 3e8:	8b e4       	ldi	r24, 0x4B	; 75
 3ea:	9d e1       	ldi	r25, 0x1D	; 29
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_init+0x4c>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <lcd_init+0x52>
 3f2:	00 00       	nop
 3f4:	8e 01       	movw	r16, r28
 3f6:	0f 5f       	subi	r16, 0xFF	; 255
 3f8:	1f 4f       	sbci	r17, 0xFF	; 255
    wr_lcd_mode(data, 1);
}

// initialize the LCD controller

void lcd_init(unsigned char command)
 3fa:	0f 2e       	mov	r0, r31
 3fc:	f7 e0       	ldi	r31, 0x07	; 7
 3fe:	ef 2e       	mov	r14, r31
 400:	ff 24       	eor	r15, r15
 402:	f0 2d       	mov	r31, r0
 404:	ec 0e       	add	r14, r28
 406:	fd 1e       	adc	r15, r29
    I2C_INIT();

    _delay_ms(30);               // 30 ms Delay nach power-up

    for (i = 0; i < sizeof(init_sequenz); i++) {
        wr_lcd_mode(init_sequenz[i], 0);
 408:	f8 01       	movw	r30, r16
 40a:	81 91       	ld	r24, Z+
 40c:	8f 01       	movw	r16, r30
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	0e 94 0f 01 	call	0x21e	; 0x21e <wr_lcd_mode>
 414:	81 ee       	ldi	r24, 0xE1	; 225
 416:	94 e0       	ldi	r25, 0x04	; 4
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <lcd_init+0x78>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <lcd_init+0x7e>
 41e:	00 00       	nop

    I2C_INIT();

    _delay_ms(30);               // 30 ms Delay nach power-up

    for (i = 0; i < sizeof(init_sequenz); i++) {
 420:	0e 15       	cp	r16, r14
 422:	1f 05       	cpc	r17, r15
 424:	89 f7       	brne	.-30     	; 0x408 <lcd_init+0x68>
        wr_lcd_mode(init_sequenz[i], 0);
        _delay_ms(5);
    }
	wr_lcd_mode(command, 0);
 426:	8d 2d       	mov	r24, r13
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	0e 94 0f 01 	call	0x21e	; 0x21e <wr_lcd_mode>
}
 42e:	26 96       	adiw	r28, 0x06	; 6
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
 43a:	cf 91       	pop	r28
 43c:	df 91       	pop	r29
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	ff 90       	pop	r15
 444:	ef 90       	pop	r14
 446:	df 90       	pop	r13
 448:	08 95       	ret

0000044a <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
 44a:	68 e0       	ldi	r22, 0x08	; 8
 44c:	0e 94 0f 01 	call	0x21e	; 0x21e <wr_lcd_mode>
}
 450:	08 95       	ret

00000452 <main>:
#include <compat/twi.h>
#include "lcd.h"   
        
int main(void)
{
    lcd_init(LCD_ON_DISPLAY);
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <lcd_init>

	lcd_backlight(0);
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 25 02 	call	0x44a	; 0x44a <lcd_backlight>
 45e:	8f e9       	ldi	r24, 0x9F	; 159
 460:	96 e8       	ldi	r25, 0x86	; 134
 462:	a1 e0       	ldi	r26, 0x01	; 1
 464:	81 50       	subi	r24, 0x01	; 1
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	a0 40       	sbci	r26, 0x00	; 0
 46a:	e1 f7       	brne	.-8      	; 0x464 <main+0x12>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <main+0x1c>
 46e:	00 00       	nop

	_delay_ms(500);

	lcd_backlight(1);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 25 02 	call	0x44a	; 0x44a <lcd_backlight>
 476:	8f e9       	ldi	r24, 0x9F	; 159
 478:	96 e8       	ldi	r25, 0x86	; 134
 47a:	a1 e0       	ldi	r26, 0x01	; 1
 47c:	81 50       	subi	r24, 0x01	; 1
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	a0 40       	sbci	r26, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <main+0x2a>
 484:	00 c0       	rjmp	.+0      	; 0x486 <main+0x34>
 486:	00 00       	nop

	_delay_ms(500);

        lcd_clrscr();
 488:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_clrscr>
		lcd_gotoxy(0, 0);
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_gotoxy>
		lcd_puts_P("Hello World");
 494:	88 e6       	ldi	r24, 0x68	; 104
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 b6 01 	call	0x36c	; 0x36c <lcd_puts_p>
		
}
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	08 95       	ret

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
